#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include "lex.h"

#define BufSize  1024
#define Sentinel '\0'

#define Space    ' '
#define Tab      '\t'
#define Newline  '\n'

#define MAX_MSG  30   /* maximum size of an error message */
#define MAX_BUF  80   /* maximum size of an identifier */

static unsigned char buf[2*BufSize + 1];

static unsigned char *lexeme_beginning, *forward;

static int line = 1, column = 0;

#define retract1 forward--

#define NextChar() ((*forward)? *forward++:((forward=buf+BufSize+1),fillbuf()))

/*initial status when getting token */
static int IsFirst = 1;

int yylval, yylen;
char yytext[MAX_BUF];

void yyerror();
char err_msg[MAX_MSG];      /* error message buffer */

FILE *fin;

static unsigned char fillbuf()
{
   register unsigned char *i, *j;

   /* when two buffers overflow, issue error messsage and abort program */
   if (lexeme_beginning == buf) {
      printf("Buffer overflow error\n");
      exit(0);
   }

   /* move the rest of token to the other buffer */
   i = lexeme_beginning;
   j = lexeme_beginning - BufSize;

   while (j < forward-1)
      *(j++) = *(i++) ; 

   lexeme_beginning -= BufSize;

   buf[BufSize + fread(buf+BufSize, 1, BufSize, fin)] = Sentinel;

   return buf[BufSize];        /* end of buffer */
}

/* gets the next token from input stream */
int get_tok()
{
   register unsigned char c, *pc;
   register int state = 0;
   register int i;

   /* check whether initial or not */
   if (IsFirst) {
      buf[2*BufSize] = Sentinel;
      forward = buf + 2*BufSize;
      IsFirst = 0;
   }

   lexeme_beginning = forward;

   /* until pattern match, repeat */
/* FILL IN THIS BLANK */
   while(1) {
      switch(state) {

      case 0: yylval =0;
              c = NextChar();
              column++;
              if(c == Space){
                lexeme_beginning++;
              }
              else if(c ==Tab){
                column += 7 - (column%8);
                lexeme_beginning++;
              }
              else if (c == Newline){
                 line++;
                 column =0;
                 lexeme_beginning++;
              }
              else if( next_state[c] ==0){
                 sprintf(err_msg, "invalid char : 0x%x",c);
                 yyerror(err_msg);
                 lexeme_beginning++;
              }
              else state = next_state[c];
              break;
      
      case 1: c = NextChar();
              colmn++;
              if( c =='') state =;
              else if(isanlnum())state =
              else {
                    retract1;      
                    column--;
                    state = 14;
              }
              break;

      case 7: c = NextChar();
              colmn++;
              if(c =='e') state =8;
              else if(isalnum(c) state = 14;
              else{
                 retract1;
                 column--;
                 state = 14;
              } 
              break;

	
      case 8: c = NextChar();
              colmn++;
              if(isalnum(c) state = 14;
              else{
                 retract1;
                 column--;
                 return(TK_ELSE);
              } 
              break;

      case 14: c = NextChar();
              colmn++;
              if(isalnum(c) state = 14;
              else{
                 retract1;
                 column--;
                 yylen = forword - lexeme_beginning;
                 pc = (char*) lexeme_beginning;
                 for(i = 0; i < yylen; len)
                     yytext[i] = *pc++;
                 return(TK_ID);
              } 
              break;


      }
 


      }   /* end of state */
   }      /* end of while */
}         /* end of function get_tok */

/* prints the current line, column error message */
void yyerror(char *msg)
{
   fprintf(stderr, "line:%3d, column:%3d %s\n", line, column, msg); 
}
